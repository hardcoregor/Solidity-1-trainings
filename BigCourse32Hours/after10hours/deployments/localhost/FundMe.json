{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeed",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "fundingAddress",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getVersion",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "s_addressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "s_funders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "s_priceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0x9c9f7142728118d7cc246027e33d3abce77e4a017965947ac2c19749fbfa8698",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1133984",
        "logsBloom": "0x
        "blockHash": "0x6e1df7173c7b8609f57a9b88aca6b0ce6aae48e8a067bdf68b4dbc3b98408de9",
        "transactionHash": "0x9c9f7142728118d7cc246027e33d3abce77e4a017965947ac2c19749fbfa8698",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1133984",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "e7e6298df151c7490ca72f2798826dc1",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] public s_funders;\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\",\"keccak256\":\"0xeae38abb38754a3fc8fbe2e97f717eb64ced587a1e5f015762c7e1dded193e3f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n  function getPrice(AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n    // ETH/USD rate in 18 digit\\r\\n    return uint256(answer * 10000000000);\\r\\n  }\\r\\n\\r\\n  // 1000000000\\r\\n  // call it get fiatConversionRate, since it assumes something about decimals\\r\\n  // It wouldn't work for every aggregator\\r\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 ethPrice = getPrice(priceFeed);\\r\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n    // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\r\\n    return ethAmountInUsd;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xab7d80676dc221d14cd91c54314e8708d2b197b64b990984b6c3370d486ed5f5\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620014b1380380620014b1833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6113246200018d600039600081816103df0152818161057201528181610657015281816107e201526109d801526113246000f3fe6080604052600436106100a75760003560e01c80636b69a592116100645780636b69a592146101d0578063893d20e8146101fb5780639e87a5cd14610226578063b60d428814610251578063be2693f01461025b578063d7b4750c14610272576100a7565b80630343fb25146100ac5780630d8e6e2c146100e95780630ec3b027146101145780631bf6132d1461013f5780633ccfd60b1461017c57806354861af714610193575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610c9b565b6102af565b6040516100e09190610ce1565b60405180910390f35b3480156100f557600080fd5b506100fe6102f8565b60405161010b9190610ce1565b60405180910390f35b34801561012057600080fd5b5061012961039f565b6040516101369190610d5b565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190610c9b565b6103c5565b6040516101739190610ce1565b60405180910390f35b34801561018857600080fd5b506101916103dd565b005b34801561019f57600080fd5b506101ba60048036038101906101b59190610da2565b610607565b6040516101c79190610dde565b60405180910390f35b3480156101dc57600080fd5b506101e5610646565b6040516101f29190610ce1565b60405180910390f35b34801561020757600080fd5b50610210610653565b60405161021d9190610dde565b60405180910390f35b34801561023257600080fd5b5061023b61067b565b6040516102489190610d5b565b60405180910390f35b6102596106a5565b005b34801561026757600080fd5b506102706107e0565b005b34801561027e57600080fd5b5061029960048036038101906102949190610da2565b610a6e565b6040516102a69190610dde565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610e0e565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610462576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561050d57600080828154811061048757610486610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061050590610e99565b915050610465565b50600067ffffffffffffffff81111561052957610528610ee2565b5b6040519080825280602002602001820160405280156105575781602001602082028036833780820191505090505b506000908051906020019061056d929190610b91565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516105b490610f42565b60006040518083038185875af1925050503d80600081146105f1576040519150601f19603f3d011682016040523d82523d6000602084013e6105f6565b606091505b505090508061060457600080fd5b50565b6000818154811061061757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006106e4600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610ab590919063ffffffff16565b1015610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c90610fb4565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107749190610fd4565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610865576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156108e857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161089e575b5050505050905060005b81518110156109735760008282815181106109105761090f610e3b565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061096b90610e99565b9150506108f2565b50600067ffffffffffffffff81111561098f5761098e610ee2565b5b6040519080825280602002602001820160405280156109bd5781602001602082028036833780820191505090505b50600090805190602001906109d3929190610b91565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610a1a90610f42565b60006040518083038185875af1925050503d8060008114610a57576040519150601f19603f3d011682016040523d82523d6000602084013e610a5c565b606091505b5050905080610a6a57600080fd5b5050565b6000808281548110610a8357610a82610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610ac183610af1565b90506000670de0b6b3a76400008583610ada919061102a565b610ae491906110b3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b72919061115c565b5050509150506402540be40081610b8991906111d7565b915050919050565b828054828255906000526020600020908101928215610c0a579160200282015b82811115610c095782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bb1565b5b509050610c179190610c1b565b5090565b5b80821115610c34576000816000905550600101610c1c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6882610c3d565b9050919050565b610c7881610c5d565b8114610c8357600080fd5b50565b600081359050610c9581610c6f565b92915050565b600060208284031215610cb157610cb0610c38565b5b6000610cbf84828501610c86565b91505092915050565b6000819050919050565b610cdb81610cc8565b82525050565b6000602082019050610cf66000830184610cd2565b92915050565b6000819050919050565b6000610d21610d1c610d1784610c3d565b610cfc565b610c3d565b9050919050565b6000610d3382610d06565b9050919050565b6000610d4582610d28565b9050919050565b610d5581610d3a565b82525050565b6000602082019050610d706000830184610d4c565b92915050565b610d7f81610cc8565b8114610d8a57600080fd5b50565b600081359050610d9c81610d76565b92915050565b600060208284031215610db857610db7610c38565b5b6000610dc684828501610d8d565b91505092915050565b610dd881610c5d565b82525050565b6000602082019050610df36000830184610dcf565b92915050565b600081519050610e0881610d76565b92915050565b600060208284031215610e2457610e23610c38565b5b6000610e3284828501610df9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ea482610cc8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ed757610ed6610e6a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f2c600083610f11565b9150610f3782610f1c565b600082019050919050565b6000610f4d82610f1f565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f9e601b83610f57565b9150610fa982610f68565b602082019050919050565b60006020820190508181036000830152610fcd81610f91565b9050919050565b6000610fdf82610cc8565b9150610fea83610cc8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561101f5761101e610e6a565b5b828201905092915050565b600061103582610cc8565b915061104083610cc8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561107957611078610e6a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110be82610cc8565b91506110c983610cc8565b9250826110d9576110d8611084565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b611103816110e4565b811461110e57600080fd5b50565b600081519050611120816110fa565b92915050565b6000819050919050565b61113981611126565b811461114457600080fd5b50565b60008151905061115681611130565b92915050565b600080600080600060a0868803121561117857611177610c38565b5b600061118688828901611111565b955050602061119788828901611147565b94505060406111a888828901610df9565b93505060606111b988828901610df9565b92505060806111ca88828901611111565b9150509295509295909350565b60006111e282611126565b91506111ed83611126565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561122c5761122b610e6a565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561126957611268610e6a565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112a6576112a5610e6a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112e3576112e2610e6a565b5b82820290509291505056fea264697066735822122054b6016f1b99a64d7b7b23b5bea125fe0df10280705e30ed4eb51ec9df1cdfab64736f6c63430008080033",
    "deployedBytecode": "0x6080604052600436106100a75760003560e01c80636b69a592116100645780636b69a592146101d0578063893d20e8146101fb5780639e87a5cd14610226578063b60d428814610251578063be2693f01461025b578063d7b4750c14610272576100a7565b80630343fb25146100ac5780630d8e6e2c146100e95780630ec3b027146101145780631bf6132d1461013f5780633ccfd60b1461017c57806354861af714610193575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610c9b565b6102af565b6040516100e09190610ce1565b60405180910390f35b3480156100f557600080fd5b506100fe6102f8565b60405161010b9190610ce1565b60405180910390f35b34801561012057600080fd5b5061012961039f565b6040516101369190610d5b565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190610c9b565b6103c5565b6040516101739190610ce1565b60405180910390f35b34801561018857600080fd5b506101916103dd565b005b34801561019f57600080fd5b506101ba60048036038101906101b59190610da2565b610607565b6040516101c79190610dde565b60405180910390f35b3480156101dc57600080fd5b506101e5610646565b6040516101f29190610ce1565b60405180910390f35b34801561020757600080fd5b50610210610653565b60405161021d9190610dde565b60405180910390f35b34801561023257600080fd5b5061023b61067b565b6040516102489190610d5b565b60405180910390f35b6102596106a5565b005b34801561026757600080fd5b506102706107e0565b005b34801561027e57600080fd5b5061029960048036038101906102949190610da2565b610a6e565b6040516102a69190610dde565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610e0e565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610462576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561050d57600080828154811061048757610486610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061050590610e99565b915050610465565b50600067ffffffffffffffff81111561052957610528610ee2565b5b6040519080825280602002602001820160405280156105575781602001602082028036833780820191505090505b506000908051906020019061056d929190610b91565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516105b490610f42565b60006040518083038185875af1925050503d80600081146105f1576040519150601f19603f3d011682016040523d82523d6000602084013e6105f6565b606091505b505090508061060457600080fd5b50565b6000818154811061061757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006106e4600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610ab590919063ffffffff16565b1015610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c90610fb4565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107749190610fd4565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610865576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156108e857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161089e575b5050505050905060005b81518110156109735760008282815181106109105761090f610e3b565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061096b90610e99565b9150506108f2565b50600067ffffffffffffffff81111561098f5761098e610ee2565b5b6040519080825280602002602001820160405280156109bd5781602001602082028036833780820191505090505b50600090805190602001906109d3929190610b91565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610a1a90610f42565b60006040518083038185875af1925050503d8060008114610a57576040519150601f19603f3d011682016040523d82523d6000602084013e610a5c565b606091505b5050905080610a6a57600080fd5b5050565b6000808281548110610a8357610a82610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610ac183610af1565b90506000670de0b6b3a76400008583610ada919061102a565b610ae491906110b3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b3a57600080fd5b505afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b72919061115c565b5050509150506402540be40081610b8991906111d7565b915050919050565b828054828255906000526020600020908101928215610c0a579160200282015b82811115610c095782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bb1565b5b509050610c179190610c1b565b5090565b5b80821115610c34576000816000905550600101610c1c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6882610c3d565b9050919050565b610c7881610c5d565b8114610c8357600080fd5b50565b600081359050610c9581610c6f565b92915050565b600060208284031215610cb157610cb0610c38565b5b6000610cbf84828501610c86565b91505092915050565b6000819050919050565b610cdb81610cc8565b82525050565b6000602082019050610cf66000830184610cd2565b92915050565b6000819050919050565b6000610d21610d1c610d1784610c3d565b610cfc565b610c3d565b9050919050565b6000610d3382610d06565b9050919050565b6000610d4582610d28565b9050919050565b610d5581610d3a565b82525050565b6000602082019050610d706000830184610d4c565b92915050565b610d7f81610cc8565b8114610d8a57600080fd5b50565b600081359050610d9c81610d76565b92915050565b600060208284031215610db857610db7610c38565b5b6000610dc684828501610d8d565b91505092915050565b610dd881610c5d565b82525050565b6000602082019050610df36000830184610dcf565b92915050565b600081519050610e0881610d76565b92915050565b600060208284031215610e2457610e23610c38565b5b6000610e3284828501610df9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ea482610cc8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ed757610ed6610e6a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f2c600083610f11565b9150610f3782610f1c565b600082019050919050565b6000610f4d82610f1f565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f9e601b83610f57565b9150610fa982610f68565b602082019050919050565b60006020820190508181036000830152610fcd81610f91565b9050919050565b6000610fdf82610cc8565b9150610fea83610cc8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561101f5761101e610e6a565b5b828201905092915050565b600061103582610cc8565b915061104083610cc8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561107957611078610e6a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110be82610cc8565b91506110c983610cc8565b9250826110d9576110d8611084565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b611103816110e4565b811461110e57600080fd5b50565b600081519050611120816110fa565b92915050565b6000819050919050565b61113981611126565b811461114457600080fd5b50565b60008151905061115681611130565b92915050565b600080600080600060a0868803121561117857611177610c38565b5b600061118688828901611111565b955050602061119788828901611147565b94505060406111a888828901610df9565b93505060606111b988828901610df9565b92505060806111ca88828901611111565b9150509295509295909350565b60006111e282611126565b91506111ed83611126565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561122c5761122b610e6a565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561126957611268610e6a565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112a6576112a5610e6a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112e3576112e2610e6a565b5b82820290509291505056fea264697066735822122054b6016f1b99a64d7b7b23b5bea125fe0df10280705e30ed4eb51ec9df1cdfab64736f6c63430008080033",
    "devdoc": {
        "author": "Patrick Collins",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "getAddressToAmountFunded(address)": {
                "params": {
                    "fundingAddress": "the address of the funder"
                },
                "returns": {
                    "_0": "the amount funded"
                }
            }
        },
        "title": "A sample Funding Contract",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "Funds our contract based on the ETH/USD price"
            },
            "getAddressToAmountFunded(address)": {
                "notice": "Gets the amount that an address has funded"
            }
        },
        "notice": "This contract is for creating a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 67,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
